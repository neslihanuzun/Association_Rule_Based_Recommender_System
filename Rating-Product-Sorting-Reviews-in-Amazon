#!pip install mlxtend
import pandas as pd
pd.set_option('display.max_columns', None)

pd.set_option('display.width', 500)
# çıktının tek bir satırda olmasını sağlar.
pd.set_option('display.expand_frame_repr', False)
from mlxtend.frequent_patterns import apriori, association_rules
import warnings
warnings.filterwarnings("ignore")

df_ = pd.read_csv(r"C:\Users\lenovo\Desktop\vbo-ml\hafta5\ödev\armut_data.csv")
df = df_.copy()
df = df.iloc[0:200]

def check_df(df, head=5):
    print("##################### Shape #####################")
    print(df.shape)
    print("##################### Types #####################")
    print(df.dtypes)
    print("##################### Head #####################")
    print(df.head(head))
    print("##################### Tail #####################")
    print(df.tail(head))
    print("##################### NA #####################")
    print(df.isnull().sum())
    print("##################### Quantiles #####################")
    print(df.describe([0, 0.05, 0.50, 0.95, 0.99, 1]).T)
    print("##################### Info #####################")
    print(df.info)


check_df(df)


df["Hizmet"] = df['ServiceId'].astype(str) +"_"+ df["CategoryId"].astype(str)
df.head()

df["SepetID"] = df['UserId'].astype(str) +"_"+ df["CreateDate"].astype(str).str[:7]
df.head()

#Creating The Invoince Product Table

def create_invoice_product_df(df, id=False):
    if id:
        return df.groupby(['Hizmet', "SepetID"]).sum().unstack().fillna(0). \
            applymap(lambda x: 1 if x > 0 else 0)
    else:
        return df.groupby(['Hizmet', "SepetID"]).sum().unstack().fillna(0). \
            applymap(lambda x: 1 if x > 0 else 0)

inv_pro_df = create_invoice_product_df(df, id=True)
inv_pro_df.head()

#Creating Rules

frequent_itemsets = apriori(inv_pro_df,
                            min_support=0.01,
                            use_colnames=True)

frequent_itemsets.sort_values("support", ascending=False)

rules = association_rules(frequent_itemsets,
                          metric="support",
                          min_threshold=0.01)
                          
rules[(rules["support"]>0.05) & (rules["confidence"]>0.1) & (rules["lift"]>5)]


# Sample Product id: 2_0


sorted_rules = rules.sort_values("lift", ascending=False)

recommendation_list = []

for i, product in enumerate(sorted_rules["antecedents"]):
    for j in list(product):
        if j == product_id:
            recommendation_list.append(list(sorted_rules.iloc[i]["consequents"])[0])

recommendation_list[0:3]

check_id(df, 2_0)

def arl_recommender(rules_df, product_id, rec_count=1):
    sorted_rules = rules_df.sort_values("lift", ascending=False)
    recommendation_list = []
    for i, product in enumerate(sorted_rules["antecedents"]):
        for j in list(product):
            if j == product_id:
                recommendation_list.append(list(sorted_rules.iloc[i]["consequents"])[0])

    return recommendation_list[0:rec_count]


arl_recommender(rules, 2_0, 1)
arl_recommender(rules, 10_5, 2)
arl_recommender(rules, 6_2, 3)


